<!DOCTYPE html>
<html>
<head>
  
  <title> 
  YOSTUDENT
  </title>
  
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
  
</head>
<body>
  
  <%= render '/layouts/nav' %>
  <% if params[:id] != nil %>
  <% @url= '/user/' + params[:id] %>
  <% if current_page?(@url) %>
  
    <div class="container con-profile">
      <div class="img-profile">
          <img align="left" class="image-lg" src="/bg.jpg" alt="profile cover"/>
          <img align="left" class="image-profile thumbnail" src="/icon.png" alt="profile image"/>
        <div class="stats">
          <h1 style="color: rgba(255, 255, 255, 1);"> <%= User.find(@p.user_id).username %></h1>
          <h4 style="color: rgba(255, 255, 255, 1);"> Speciality</h4>
         
          <ul class="follower-container">
            <li class="follower">
              <a href="stat">
                <span class="folower-count" style="color: rgba(128,128,128,1);"> Followers <br/> <%= current_user.followers.count %>  </span>
              </a>
            </li>
            <li class="follower">
              <a href="">
                <span class="folower-count" style="color: rgba(128,128,128,1) ;"> Following <br/>  0  </span>
              </a>
            </li>
            
            <li class="follower">
              <a href="">
                <span class="folower-count" style="color: rgba(128,128,128,1); "> Collaborates <br/> 0  </span>
              </a>
            </li>
            
            <li class="follower">
              <a href="">
                <span class="folower-count" style="color: rgba(128,128,128,1); "> Sponsors <br/> 0  </span>
              </a>
            </li>
            
            <li class="follower">
              <a href="">
                <span class="folower-count" style="color: rgba(128,128,128,1); "> Partners <br/> 0 </span>
              </a>
            </li>
            
            <li class="follower">
              <a href="">
                <% render '/components/follow_button', :user => User.find_by_username(params[:id]) %>
              </a>
            </li>
          </ul>
          
          
          
             
        </div>
      </div>
      
      
      
    </div>
    
   
    
  <% end %>
  <% end %>  
  
  <div class="container">
    <span class="notice"><%= notice %></span>
    <span class="alert"><%= alert %></span>
    <%= yield %>
  </div>
  
  <style>
  
  .follower {
    color: rgba(255,141, 0, 1);
    float: left;
    margin-left: -30px;
  }
  
  .follower-count {
    font-size: 300%;
  }
  
  .follower-container {
    max-width: 560px;
    min-width: 560px;
    max-height: 59px;
    min-height: 59px;
    background-color: white;
    margin-left: 285px;
    border-radius: 5px;
    text-decoration: none;
  }
  
  
  .follower, .stat {
    display: block;
    color: white;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    margin-top: -5px;
  }
    .con-profile {
      background-color: rgba(28,65,95,0.6);
    }
    
    .img-profile > .image-lg{
      z-index: 0;
      width: 100%;
      margin-bottom: 10px;
      border-width: 5px;
      border-style: solid;
      border-color: rgba(255,141, 0, 1);
    }
    
    .image-profile{
      border-color: rgba(229,229, 229, 0.3);
      border-width: 1px;
      margin: -90px 10px 0px 50px;
      z-index:9;
      width: 20%;
    }
    
    @media(max-width: 768px){
      
      .profile-text > h1{
        font-weight: 700px;
        font-size: 16px;
      }
      
      .image-profile{
        margin: -45px 10px 0px 25px;
        z-index: 9;
        width: 20%;
      }
    }
  </style>
  
  
  
  <!--
  
  <style>

    
    .canvas {
      -webkit-filter: blur(0.5px);
      -moz-filter: blur(0.5px);
      -o-filter: blur(0.5px);
      -ms-filter: blur(0.5px);
      filter: blur(0.5px);
    }
    
    #Profile {
      position: absolute;
      margin: auto;
      top: -600px; right: 0; left: -1000px; bottom: 0;
      width: 120px; height: 120px;
      border-radius: 120px;
      text-align: center;
      cursor: pointer;
    }
    
    #Profile img {
      border-radius: 120px;
      -webkit-filter: grayscale(0.7);
      -moz-filter: grayscale(0.7);
      -ms-filter: grayscale(0.7);
      filter: grayscale(0.7);
      opacity: 0.9;
    }
    
    #Profile:before {
      content: '';
      position: absolute;
      top: -6px; left: -6px;
      width: 130px; height: 130px;
      border-radius: 162px;
      border: 1px solid #BCBCBC;
    }
    
    #Profile:after {
      content: '';
      position: absolute;
      top: -11px; left: -11px;
      width: 140px; height: 140px;
      border-radius: 172px;
      border: 1px dashed #81BDA4;
    }
    
    #Profile span {
      position: absolute;
      margin: auto;
      top: 0; right: 0; left: 0; bottom: 0;
      width: 120px; height: 120px;
      border-radius: 120px;
      line-height: 120px;
      font-family: 'Oswald';
      font-size: 20px;
      visibility: hidden;
    }
    
    #Profile:hover img {
      -webkit-filter: blur(2px);
      -moz-filter: blur(2px);
      -o-filter: blur(2px);
      -ms-filter: blur(2px);
      filter: blur(2px);
      opacity: 0.8;
    }
    
    #Profile:hover span {
      background: rgba(217, 217, 217, 0.52);
      visibility: visible;
      color: #494E52;
    }
  </style>
  
  
  <script>
    var canvas = $('canvas')[0];
    var context = canvas.getContext('2d');
    
    var Dots = [];
    var ID = 0;
    var colors = ['#FF9900', '#424242', '#BCBCBC', '#3299BB', '#B9D3B0', '#81BDA4', '#F88F79', '#F6AA93'];
    var maximum = 100;
    
    function Dot() {
      this.active = true;
      this.id = ID; ID++;
      
      this.diameter = 2 + Math.random() * 7;
    
      this.x = Math.round(Math.random() * canvas.width);
      this.y = Math.round(Math.random() * canvas.height);
      
      this.velocity = {
        x: (Math.random() < 0.5 ? -1 : 1) * Math.random() * 0.4,
        y: (Math.random() < 0.5 ? -1 : 1) * Math.random() * 0.4
      };
    
      this.alpha = 0.1;
      this.maxAlpha = this.diameter < 5 ? 0.3 : 0.8;
      this.hex = colors[Math.round(Math.random() * 7)];
      this.color = HexToRGBA(this.hex, this.alpha);
    }
    
    Dot.prototype = {
      Update: function() {
        if(this.alpha <= this.maxAlpha) {
          this.alpha += 0.005;
          this.color = HexToRGBA(this.hex, this.alpha);
        }
    
        this.x += this.velocity.x;
        this.y += this.velocity.y;
    
        if(this.x > canvas.width + 5 || this.x < 0 - 5 || this.y > canvas.height + 5 || this.y < 0 - 5) {
          this.active = false;
        }
      },
    
      Draw: function() {
        context.strokeStyle = this.color;
        context.fillStyle = this.color;
        context.save();
        context.beginPath();
        context.translate(this.x, this.y);
        context.moveTo(0, -this.diameter);
    
        for (var i = 0; i < 7; i++)
        {
          context.rotate(Math.PI / 7);
          context.lineTo(0, -(this.diameter / 2));
          context.rotate(Math.PI / 7);
          context.lineTo(0, -this.diameter);
        }
    
        if(this.id % 2 == 0) {
          context.stroke();
        } else {
          context.fill();
        }
        
        context.closePath();
        context.restore();
      }
    }
    
    function Update() {
      GenerateDots();
    
      Dots.forEach(function(Dot) {
        Dot.Update();
      });
    
      Dots = Dots.filter(function(Dot) {
        return Dot.active;
      });
    
      Render();
      requestAnimationFrame(Update);
    }
    
    function Render() {
      context.clearRect(0, 0, canvas.width, canvas.height);
      Dots.forEach(function(Dot) {
        Dot.Draw();
      });
    }
    
    function GenerateDots() {
      if(Dots.length < maximum) {
        for(var i = Dots.length; i < maximum; i++) {
          Dots.push(new Dot());
        }
      }
    
      return false;
    }
    
    function HexToRGBA(hex, alpha) {
      var red = parseInt((TrimHex(hex)).substring(0, 2), 16);
      var green = parseInt((TrimHex(hex)).substring(2, 4), 16);
      var blue = parseInt((TrimHex(hex)).substring(4, 6), 16);
    
      return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
    }
    
    function TrimHex(hex) {
      return (hex.charAt(0) == "#") ? hex.substring(1, 7) : hex;
    }
    
    function WindowSize(width, height) {
      if(width != null) { canvas.width = width; } else { canvas.width = window.innerWidth; }
      if(height != null) { canvas.height = height; } else { canvas.height = window.innerHeight; }
      
    }
    
    $(window).resize(function() {
      Dots = [];
      WindowSize();
    });
    
    WindowSize();
    GenerateDots();
    Update();
  </script>
  -->
  
</body>
</html>
